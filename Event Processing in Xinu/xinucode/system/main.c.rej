--- system/main.c
+++ system/main.c
@@ -2,22 +2,95 @@
 
 #include <xinu.h>
 
-process	main(void)
+pid32 producer_id;
+pid32 consumer_id;
+pid32 timer_id;
+
+int32 consumed_count = 0;
+const int32 CONSUMED_MAX = 100;
+
+/* Define your circular buffer structure and semaphore variables here */
+/* */
+
+/* Place your code for entering a critical section here */
+void mutex_acquire(sid32 mutex)
 {
+	/* */
+}
 
-	/* Run the Xinu shell */
+/* Place your code for leaving a critical section here */
+void mutex_release(sid32 mutex)
+{
+	/* */
+}
 
-	recvclr();
-	resume(create(shell, 8192, 50, "shell", 1, CONSOLE));
+/* Place the code for the buffer producer here */
+process producer(void)
+{
+	/* */
+
+	return OK;
+}
+
+/* Place the code for the buffer consumer here */
+process consumer(void)
+{
+	/* Every time your consumer consumes another buffer element,
+	 * make sure to include the statement:
+	 *   consumed_count += 1;
+	 * this will allow the timing function to record performance */
+	/* */
+
+	return OK;
+}
 
-	/* Wait for shell to exit and recreate it */
 
-	while (TRUE) {
-		receive();
-		sleepms(200);
-		kprintf("\n\nMain process recreating shell\n\n");
-		resume(create(shell, 4096, 20, "shell", 1, CONSOLE));
+/* Timing utility function - please ignore */
+process time_and_end(void)
+{
+	int32 times[5];
+	int32 i;
+
+	for (i = 0; i < 5; ++i)
+	{
+		times[i] = clktime_ms;
+		yield();
+
+		consumed_count = 0;
+		while (consumed_count < CONSUMED_MAX * (i+1))
+		{
+			yield();
+		}
+
+		times[i] = clktime - times[i];
 	}
+
+	kill(producer_id);
+	kill(consumer_id);
+
+	for (i = 0; i < 5; ++i)
+	{
+		kprintf("TIME ELAPSED (%d): %d\n", (i+1) * CONSUMED_MAX, times[i]);
+	}
+}
+
+process	main(void)
+{
+	recvclr();
+
+	/* Create the shared circular buffer and semaphores here */
+	/* */
+
+	producer_id = create(producer, 4096, 50, "producer", 0);
+	consumer_id = create(consumer, 4096, 50, "consumer", 0);
+	timer_id = create(time_and_end, 4096, 50, "timer", 0);
+
+	resched_cntl(DEFER_START);
+	resume(producer_id);
+	resume(consumer_id);
+	/* Uncomment the following line for part 3 to see timing results */
+	/* resume(timer_id); */
+	resched_cntl(DEFER_STOP);
+
 	return OK;
-    
 }
